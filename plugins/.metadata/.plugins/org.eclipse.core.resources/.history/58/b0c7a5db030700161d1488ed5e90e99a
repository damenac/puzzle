package fr.inria.diverse.puzzle.metrics.auxiliarMetrics;

import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;

/**
 * A pairwise cohesion matrix according to a collection of meta-classes
 * @author David Mendez Acuna
 *
 */
public class PairwiseCohesionMatrix {

	
	public static double[][] computePairwiseCohesionMatrix(List<EClass> metaClasses){
		double[][] matrix = new double[metaClasses.size()][metaClasses.size()];
		int totalReferences = countTotalReferences(metaClasses);
		
		for (int i = 0; i < metaClasses.size(); i++) {
			for (int j = i + 1; j < matrix.length; j++) {
				double pairwiseCohesion = PairwiseCohesion.computePairwiseCohesion(
						metaClasses.get(i), metaClasses.get(j));
				matrix[i][j] = (double) pairwiseCohesion / (double) totalReferences;
			}
		}
		return matrix;
	}

	/**
	 * Returns the number of references among the metaclasses in the parameters.
	 * @param metaClasses
	 * @return
	 */
	public static int countTotalReferences(List<EClass> metaClasses) {
		int result = 0;
		
		for (EClass eClass : metaClasses) {
			for (EStructuralFeature eStructuralFeature : eClass.getEStructuralFeatures()) {
				if(eStructuralFeature instanceof EReference)
					result++;
			}
			result += eClass.getESuperTypes().size();
		}
		
		return result;
	}
}
