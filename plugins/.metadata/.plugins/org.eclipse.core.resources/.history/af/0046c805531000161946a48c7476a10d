package fr.inria.diverse.puzzle.metrics.actions;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;

import fr.inria.diverse.k3.sle.common.commands.ConceptComparison;
import fr.inria.diverse.k3.sle.common.commands.MethodComparison;
import fr.inria.diverse.k3.sle.common.vos.SynthesisProperties;
import fr.inria.diverse.melange.metamodel.melange.Language;
import fr.inria.diverse.puzzle.metrics.auxiliarMetrics.HCCalculator;
import fr.inria.diverse.puzzle.metrics.auxiliarMetrics.PairwiseCohesionMatrix;
import fr.inria.diverse.puzzle.metrics.specialCharts.SemanticSignatureAndBodyVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.SemanticSignatureVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.SpecialFamilySemanticChart;
import fr.inria.diverse.puzzle.metrics.specialCharts.SpecialFamilySyntacticChart;
import fr.inria.diverse.puzzle.metrics.specialCharts.SyntacticDeepVennDiagram;
import fr.inria.diverse.puzzle.metrics.specialCharts.SyntacticNamingVennDiagram;

/**
 * Action responsible to analyze the domains hierarchy of a given DSL. 
 * 
 * @author David Mendez-Acuna
 */
public class PerformHierarchicalDomainAnalysisActionImpl {

	// -----------------------------------------------
	// Attributes/Constants
	// -----------------------------------------------
	
	private static final String REPORT_PATH_HIERARCHICAL_DOMAIN_ANALYSIS = "Report-HierarchicalDomainAnalysis.html";;
	private static PerformHierarchicalDomainAnalysisActionImpl instance;
	
	// -----------------------------------------------
	// Constructor and singleton
	// -----------------------------------------------
	
	private PerformHierarchicalDomainAnalysisActionImpl(){}
	
	public static PerformHierarchicalDomainAnalysisActionImpl getInstance(){
		if(instance == null)
			instance = new PerformHierarchicalDomainAnalysisActionImpl();
		return instance;
	}
	
	// -----------------------------------------------
	// Methods
	// -----------------------------------------------
	
	/**
	 * Performs the hierarchical domain analysis in the given domain model and generates the corresponding report in HTML. 
	 * @param selectedResource
	 * @return
	 * @throws IOException
	 * @throws CoreException
	 * @throws URISyntaxException
	 */
	public String performDomainAnalysis(SynthesisProperties synthesisProperties, EPackage metamodel, IProject project) throws Exception {
		System.out.println("Performs the domain analysis");
		System.out.println(metamodel.getEClassifiers());
		List<EClass> metaclasses = this.filterEClasses(metamodel.getEClassifiers());
		double[][] matrix = PairwiseCohesionMatrix.computePairwiseCohesionMatrix(metaclasses);
		HCCalculator hcCalculator = new HCCalculator();
		hcCalculator.performHierarhicalDomainsAnalysis(matrix, metaclasses);
		String treeReport = hcCalculator.getJSReport();
		this.createReport(treeReport, project);
		System.out.println(treeReport);
		
		return "DONE...";
	}
	
	/**
	 * Filters the list of eclassifiers by returning only those which are eclasses. 
	 * @param eClassifiers
	 * @return
	 */
	public List<EClass> filterEClasses(EList<EClassifier> eClassifiers){
		List<EClass> answer = new ArrayList<EClass>();
		for (EClassifier eClassifier : eClassifiers) {
			if(eClassifier instanceof EClass)
				answer.add((EClass)eClassifier);
		}
		return answer;
	}
	
	/**
	 * Creates the HTML file with the report that displays the commonalities among the set of DSLs. 
	 * @param languages
	 * @throws URISyntaxException
	 * @throws IOException
	 */
	public void createReport(IProject project) throws URISyntaxException, IOException{
		URL path = Platform.getBundle("fr.inria.diverse.puzzle.metrics").getEntry("/data/" + REPORT_PATH_HIERARCHICAL_DOMAIN_ANALYSIS);
        File file = new File(FileLocator.resolve(path).toURI());
        BufferedReader br = new BufferedReader(new FileReader(file));
        String content = "";
        String currentLine = br.readLine();
        while(currentLine != null){
        	content += currentLine + "\n";
        	currentLine = br.readLine();
        }
        br.close();
        
        File fileReport = new File(project.getLocation().toString() + "/" + REPORT_PATH_HIERARCHICAL_DOMAIN_ANALYSIS );
		if(!fileReport.exists())
			fileReport.createNewFile();
		PrintWriter outRileReport = new PrintWriter( fileReport );
		outRileReport.print(content);
		outRileReport.close();
	}
	
	/**
	 * Creates the .js files containing the data needed by report that displays the commonalities among the set of DSLs. 
	 * @param languages
	 * @throws URISyntaxException
	 * @throws IOException
	 */
	public void createReportData(String treeReport, IProject project) throws Exception {
		File syntacticVennData = new File(project.getLocation().toString() + "/libVenn/syntacticVennData.jsonp" );
		if(!syntacticVennData.exists())
			syntacticVennData.createNewFile();
		PrintWriter out = new PrintWriter( syntacticVennData );
		SpecialFamilySyntacticChart syntacticVennDiagram = new SyntacticNamingVennDiagram();
        out.print(syntacticVennDiagram.getVariablesDeclaration(languages, null));
        out.close();
        
        File syntacticDeepVennData = new File(project.getLocation().toString() + "/libVenn/syntacticDeepVennData.jsonp" );
		if(!syntacticDeepVennData.exists())
			syntacticDeepVennData.createNewFile();
		PrintWriter outSyntacticDeepVennData = new PrintWriter( syntacticDeepVennData );
		SpecialFamilySyntacticChart syntacticDeepVennDiagram = new SyntacticDeepVennDiagram();
		outSyntacticDeepVennData.print(syntacticDeepVennDiagram.getVariablesDeclaration(languages, null));
		outSyntacticDeepVennData.close();
        
        File semanticVennData = new File(project.getLocation().toString() + "/libVenn/semanticVennData.jsonp" );
		if(!semanticVennData.exists())
			semanticVennData.createNewFile();
		PrintWriter outSemanticVennData = new PrintWriter( semanticVennData );
		SpecialFamilySemanticChart semanticalVennDiagram = new SemanticSignatureVennDiagram();
		outSemanticVennData.print(semanticalVennDiagram.getVariablesDeclaration(languages, conceptComparisonOperator, methodComparisonOperator));
		outSemanticVennData.close();
		
		 File semanticSignatureAndBodyVennData = new File(project.getLocation().toString() + "/libVenn/semanticSignatureAndBodyVennData.jsonp" );
			if(!semanticSignatureAndBodyVennData.exists())
				semanticSignatureAndBodyVennData.createNewFile();
			PrintWriter outSemanticSignatureAndBodyVennData = new PrintWriter( semanticSignatureAndBodyVennData );
			SpecialFamilySemanticChart semanticalSignatureAndBodyVennDiagram = new SemanticSignatureAndBodyVennDiagram();
			outSemanticSignatureAndBodyVennData.print(semanticalSignatureAndBodyVennDiagram.getVariablesDeclaration(languages, 
					conceptComparisonOperator, methodComparisonOperator));
			outSemanticSignatureAndBodyVennData.close();
	}
}