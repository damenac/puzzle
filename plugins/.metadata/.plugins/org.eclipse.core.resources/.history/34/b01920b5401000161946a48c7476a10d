package fr.inria.diverse.puzzle.metrics.actions;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.ecore.EPackage;

import fr.inria.diverse.k3.sle.common.commands.ConceptComparison;
import fr.inria.diverse.k3.sle.common.commands.GraphPartition;
import fr.inria.diverse.k3.sle.common.commands.MethodComparison;
import fr.inria.diverse.k3.sle.common.utils.ModelUtils;
import fr.inria.diverse.k3.sle.common.utils.ProjectManagementServices;
import fr.inria.diverse.k3.sle.common.vos.SynthesisProperties;
import fr.inria.diverse.melange.metamodel.melange.Element;
import fr.inria.diverse.melange.metamodel.melange.Language;
import fr.inria.diverse.melange.metamodel.melange.ModelTypingSpace;
import fr.inria.diverse.puzzle.metrics.chartMetrics.FamilyChartMetric;
import fr.inria.diverse.puzzle.metrics.chartMetrics.IndividualizationRatio;
import fr.inria.diverse.puzzle.metrics.chartMetrics.ProductRelatedReusability;
import fr.inria.diverse.puzzle.metrics.chartMetrics.SizeOfCommonality;
import fr.inria.diverse.puzzle.metrics.managers.FamilysMetricManager;

/**
 * Action responsible to analyze the domains hierarchy of a given DSL. 
 * 
 * @author David Mendez-Acuna
 */
public class PerformHierarchicalDomainAnalysisActionImpl {

	// -----------------------------------------------
	// Attributes
	// -----------------------------------------------
	
	private static PerformHierarchicalDomainAnalysisActionImpl instance;
	
	// -----------------------------------------------
	// Constructor and singleton
	// -----------------------------------------------
	
	private PerformHierarchicalDomainAnalysisActionImpl(){}
	
	public static PerformHierarchicalDomainAnalysisActionImpl getInstance(){
		if(instance == null)
			instance = new PerformHierarchicalDomainAnalysisActionImpl();
		return instance;
	}
	
	// -----------------------------------------------
	// Methods
	// -----------------------------------------------
	
	/**
	 * Computes the metrics defined in Mendez-Acuna et. al and generates the corresponding report in HTML. 
	 * @param selectedResource
	 * @return
	 * @throws IOException
	 * @throws CoreException
	 * @throws URISyntaxException
	 */
	public String computeMetrics(SynthesisProperties synthesisProperties, ModelTypingSpace familyTypingSpace, IProject project) throws Exception {
		ConceptComparison conceptComparisonOperator = synthesisProperties.getConceptComparisonOperator();
		MethodComparison methodComparisonOperator = synthesisProperties.getMethodComparisonOperator();
		GraphPartition graphPartition = synthesisProperties.getGraphPartition();
		ArrayList<EPackage> ePackages = new ArrayList<EPackage>();
		ArrayList<Language> languages = new ArrayList<Language>();
		
		for (Element element : familyTypingSpace.getElements()) {
			if(element instanceof Language){
				Language language = (Language)element;
				languages.add(language);
				EPackage currentMetamodel = ModelUtils.loadEcoreResource(language.getSyntax().getEcoreUri());
				ePackages.add(currentMetamodel);
			}
		}
		
		String metrics = "Metrics calculated"; 
		
		List<FamilyChartMetric> chartMetrics = new ArrayList<FamilyChartMetric>();
		chartMetrics.add(new SizeOfCommonality());
		chartMetrics.add(new ProductRelatedReusability());
		chartMetrics.add(new IndividualizationRatio());
		String generalMetricsString = "";
		for (FamilyChartMetric chartMetric : chartMetrics) {
			generalMetricsString += chartMetric.getVariablesDeclaration(languages, conceptComparisonOperator, methodComparisonOperator, graphPartition);
		}

		String generalMetricsWindowsString = "window.onload = function(){\n";
		for (FamilyChartMetric chartMetric : chartMetrics) {
			generalMetricsWindowsString += chartMetric.getWindow(languages);
		}
		generalMetricsWindowsString += "};";
		
		File generalMetrics = new File(project.getLocation().toString() + "/lib/metrics.jsonp" );
		if(!generalMetrics.exists())
			generalMetrics.createNewFile();
		PrintWriter outMetrics = new PrintWriter( generalMetrics );
		outMetrics.print(generalMetricsString + "\n" + generalMetricsWindowsString);
		outMetrics.close();
		
		FamilysMetricManager familysMetric = new FamilysMetricManager(project);
		
		familysMetric.createReport1FamilysShape(languages);
		familysMetric.createReport1FamilysShapeData(languages, conceptComparisonOperator, methodComparisonOperator);
//		familysMetric.createReport2CostSaving(languages);
//		familysMetric.createReport2CostSavingData(languages, conceptComparisonOperator, methodComparisonOperator, graphPartition);
		familysMetric.createReport3ReuseMetrics(languages);
//		familysMetric.createDependenciesGraphData(languages, conceptComparisonOperator, methodComparisonOperator);
//		familysMetric.createDependenciesGraph(languages);
		familysMetric.createFamilyMembershipGraphData(languages, conceptComparisonOperator, methodComparisonOperator);
		familysMetric.createFamilyMembershipGraph(languages);
//		familysMetric.createTarjansGraphData(languages, conceptComparisonOperator, methodComparisonOperator);
//		familysMetric.createTarjansGraph(languages);
		familysMetric.copyAnalysisSemanticsData(languages, conceptComparisonOperator, methodComparisonOperator);
		familysMetric.copyAnalysisSemantics(languages);
		
		ProjectManagementServices.refreshProject(project);
		return metrics;
	}
}