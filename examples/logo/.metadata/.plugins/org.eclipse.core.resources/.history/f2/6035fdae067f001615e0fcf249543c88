package logo;

import Logo.VarRef;
import fr.inria.diverse.k3.al.annotationprocessor.Aspect;
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod;
import java.util.Hashtable;
import logo.ExpressionAspect;
import logo.VarReferenceAspectVarRefAspectProperties;

@Aspect(className = VarRef.class)
@SuppressWarnings("all")
public class VarReferenceAspect extends ExpressionAspect {
  @OverrideAspectMethod
  public static Object eval(final VarRef _self, final Hashtable<String, Object> context) {
    logo.VarReferenceAspectVarRefAspectProperties _self_ = logo.VarReferenceAspectVarRefAspectContext.getSelf(_self);
    Object result = null;
    result =_privk3_eval(_self_, _self,context);
    return (java.lang.Object)result;
  }
  
  private static Object super_eval(final VarRef _self, final Hashtable<String, Object> context) {
    logo.ExpressionAspectExpressionAspectProperties _self_ = logo.ExpressionAspectExpressionAspectContext.getSelf(_self);
    return  logo.ExpressionAspect._privk3_eval(_self_, _self,context);
  }
  
  protected static Object _privk3_eval(final VarReferenceAspectVarRefAspectProperties _self_, final VarRef _self, final Hashtable<String, Object> context) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field key is undefined for the type VarRef");
  }
}
