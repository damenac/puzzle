package logo;

import fr.inria.diverse.k3.al.annotationprocessor.Aspect;
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod;
import java.util.Hashtable;
import logo.ExpressionAspect;

/* @Aspect(className = /* name is null */) */@SuppressWarnings("all")
public class RelationalExpressionAspect extends ExpressionAspect {
  @OverrideAspectMethod
  public Object eval(final Hashtable<String, Object> context) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field RelationalOperator is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field RelationalOperator is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field RelationalOperator is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field RelationalOperator is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field RelationalOperator is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field RelationalOperator is undefined"
      + "\nThe method or field _self is undefined"
      + "\nThe method or field _self is undefined"
      + "\noperator cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEQUALS cannot be resolved"
      + "\nleft cannot be resolved"
      + "\neval cannot be resolved"
      + "\nright cannot be resolved"
      + "\neval cannot be resolved"
      + "\noperator cannot be resolved"
      + "\n== cannot be resolved"
      + "\nNOT_EQUAL cannot be resolved"
      + "\nleft cannot be resolved"
      + "\neval cannot be resolved"
      + "\nright cannot be resolved"
      + "\neval cannot be resolved"
      + "\noperator cannot be resolved"
      + "\n== cannot be resolved"
      + "\nLESS_THAN cannot be resolved"
      + "\nleft cannot be resolved"
      + "\neval cannot be resolved"
      + "\nright cannot be resolved"
      + "\neval cannot be resolved"
      + "\noperator cannot be resolved"
      + "\n== cannot be resolved"
      + "\nGREATER_THAN cannot be resolved"
      + "\nleft cannot be resolved"
      + "\neval cannot be resolved"
      + "\nright cannot be resolved"
      + "\neval cannot be resolved"
      + "\noperator cannot be resolved"
      + "\n== cannot be resolved"
      + "\nLESS_THAN_OR_EQUAL_TO cannot be resolved"
      + "\nleft cannot be resolved"
      + "\neval cannot be resolved"
      + "\nright cannot be resolved"
      + "\neval cannot be resolved"
      + "\noperator cannot be resolved"
      + "\n== cannot be resolved"
      + "\nGREATER_THAN_OR_EQUAL_TO cannot be resolved"
      + "\nleft cannot be resolved"
      + "\neval cannot be resolved"
      + "\nright cannot be resolved"
      + "\neval cannot be resolved");
  }
}
