package FSMLogoFlowcharts.expression

import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import java.util.Hashtable
import ExpressionModule.Expression
import ExpressionModule.Literal
import ExpressionModule.ArithmeticExpression
import ExpressionModule.RelationalExpression
import ExpressionModule.VarReference
import static extension FSMLogoFlowcharts.expression.LiteralAspect.*
import static extension FSMLogoFlowcharts.expression.ArithmeticExpressionAspect.*
import static extension FSMLogoFlowcharts.expression.RelationalExpressionAspect.*

@Aspect(className=Expression)
public class ExpressionAspect {
	def Object eval(Hashtable<String, Object> context) {
		if(_self instanceof Literal)
			return (_self as Literal).eval(context)
		else if(_self instanceof ArithmeticExpression)
			return (_self as ArithmeticExpression).eval(context)
		else if(_self instanceof RelationalExpression)
			return (_self as RelationalExpression).eval(context)
		else if(_self instanceof VarReference)
			return (_self as VarReference).eval(context)
		else 
			return 0 
	}
}
